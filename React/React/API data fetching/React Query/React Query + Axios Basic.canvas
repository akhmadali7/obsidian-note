{
	"nodes":[
		{"id":"70dd943b387cae1c","type":"text","text":"```js\n//mutate API\nimport { useMutation } from '@tanstack/react-query';\nimport { axiosInstance } from '../../lib/axios.js';\n\nconst useLogin = () => {\n  return useMutation({\n    mutationFn: async ({ username, password }) => {\n      // Debugging: Log the data being sent to the backend\n      console.log(\"Sending data to API:\", { username, password });\n\n      const loginResponse = await axiosInstance.post('/auth/login', {username, password});\n\n      return loginResponse.data; // Returning the data (not the full response)\n    },\n    onError: (error) => {\n      console.error(\"Login error:\", error.response || error.message);\n    },\n  });\n};\n\nexport default useLogin;\n\n```","x":214,"y":-260,"width":886,"height":560},
		{"id":"e465adfd84eb91df","type":"text","text":"```js\n//query or fetch API\nimport {useQuery} from '@tanstack/react-query';  \nimport {axiosInstance} from '../../lib/axios.js';  \n  \nconst UseFetchAccount = () => {  \n    return useQuery({  \n        queryKey: ['account data'],  \n        queryFn: async () => {  \n            const fetchAccountResponse = await axiosInstance.get('account')  \n            return fetchAccountResponse.data  \n        },  \n\t\trefetchOnWindowFocus: true\n    })  \n};  \n  \nexport default UseFetchAccount;\n```","x":-640,"y":-260,"width":760,"height":420},
		{"id":"779541531315a4e0","type":"text","text":"```js\n//declare axios setup\nimport axios from 'axios';  \n  \nexport const axiosInstance = axios.create({  \n    baseURL: import.meta.env.VITE_API_URL  \n})\n```","x":-567,"y":-680,"width":614,"height":200},
		{"id":"4518556f6c35f343","type":"text","text":"```js\nconst Account = () => {  \n    const {data : account, isLoading, isError, error} = useFetchAccount()  \n    console.log(account)  \n    return (  \n        <></>  \n    )  \n}\n```","x":-640,"y":260,"width":760,"height":220},
		{"id":"9901bf717e450475","type":"text","text":"```js\nconst Form = () => {  \n    const {mutate, data, isPending, isSuccess, isError, error} = useLogin()  \n    const [hasReset, setHasReset] = useState(false);  \n  \n    // Initialize formik  \n    const formik = useFormik({  \n        initialValues: {  \n            email: \"\",  \n            password: \"\"  \n        },  \n        onSubmit: (values) => {  \n            // Debugging: Log the form values before submission  \n            console.log(\"Form values on submit:\", values);  \n  \n            // Here, if API expects 'username', pass 'email' as 'username'  \n            mutate({  \n                username: values.email,  // Assuming the API expects 'username'  \n                password: values.password  \n            });  \n            // console.log(data)  \n        },  \n    });  \n  \n    // Handle success and reset form once login is successful  \n    useEffect(() => {  \n        if (data && !hasReset) {  \n            // Reset form if mutation succeeds and form hasn't been reset yet  \n            formik.resetForm();  \n            setHasReset(true); // Mark the form as reset  \n            console.log('Form reset after success:', data);  \n        }  \n    }, [data, formik, hasReset]);  \n  \n    // Handle input changes  \n    function handleFormInput(e) {  \n        e.preventDefault();  \n        formik.setFieldValue(e.target.name, e.target.value);  \n    }  \n  \n  \n    return (  \n        <section className=\"flex px-32 py-10 gap-5\">  \n            <form onSubmit={formik.handleSubmit} className=\"flex flex-col gap-4\">  \n                <label className=\"floating-label\">  \n                    <input type=\"text\" placeholder=\"Email\" className=\"input input-lg\" name=\"email\"  \n                           value={formik.values.email}  \n                           onChange={handleFormInput}/>  \n                    <span>Email</span>  \n                </label>  \n                <label className=\"floating-label\">  \n                    <input type=\"text\" placeholder=\"Password\" className=\"input input-lg\" name=\"password\"  \n                           value={formik.values.password}  \n                           onChange={handleFormInput}/>  \n                    <span>Password</span>  \n                </label>  \n                <button className=\"btn btn-soft btn-primary\" type=\"submit\"  \n                        disabled={isPending}>{isPending ? 'Logging in...' : 'Login'}</button>  \n            </form>  \n            {isSuccess && 'Login Success' }  \n        </section>  \n    )}\n```","x":214,"y":480,"width":1026,"height":1360},
		{"id":"de807bc2dd4b3b23","type":"text","text":"```js\nimport { useQuery } from '@tanstack/react-query';\nimport { useNavigate } from 'react-router-dom'; // For React Router v6\nimport { axiosInstance } from '../../lib/axios.js';\n\nconst UseFetchAccount = () => {\n  const navigate = useNavigate(); // React Router v6's navigate hook\n\n  return useQuery({\n    queryKey: ['account data'],\n    queryFn: async () => {\n      const token = localStorage.getItem('token'); // Get the token from localStorage or context\n\n      if (!token) {\n        // If no token is found, redirect to login page\n        navigate('/login');\n        throw new Error('No token found');\n      }\n\n      try {\n        const fetchAccountResponse = await axiosInstance.get('user/1', {\n          headers: {\n            Authorization: `Bearer ${token}`, // Add the Bearer token\n          },\n        });\n\n        return fetchAccountResponse.data;\n      } catch (error) {\n        if (error.response && error.response.status === 401) {\n          // If the token is invalid (401 Unauthorized), redirect to login page\n          navigate('/login');\n        }\n        throw error;\n      }\n    },\n    refetchOnWindowFocus: true, // Optional, refetch on window focus\n  });\n};\n\nexport default UseFetchAccount;\n\n```","x":-1720,"y":-252,"width":975,"height":932},
		{"id":"0b999e76c55e3d57","type":"text","text":"token saved in localstorage\n```js\nconst token = localStorage.getItem('token');\n```","x":-2320,"y":34,"width":440,"height":180},
		{"id":"aa211c939b7c0c20","type":"text","text":"token saved in app (Context API)\n```js\nconst {token} = useContext(AuthContext)\n```\n```js\n<QueryClientProvider client={queryClient}>\n  <TokenProvider>\n    <App />\n  </TokenProvider>\n</QueryClientProvider>\n```","x":-2320,"y":260,"width":440,"height":350},
		{"id":"90b9ccd1dc90b790","type":"text","text":"## Setup React Quee\n```js\n//index.js or main.js\nconst queryClient = new QueryClient({  \n    defaultOptions: {  \n        queries: {  \n            refetchOnWindowFocus: false  \n        }  \n    }  \n})\n\n//...\n\n<QueryClientProvider client={queryClient}>  \n    <App/>  \n</QueryClientProvider>\n```","x":-1520,"y":-895,"width":575,"height":430,"color":"5"}
	],
	"edges":[
		{"id":"4748e9189313aa28","fromNode":"779541531315a4e0","fromSide":"bottom","toNode":"70dd943b387cae1c","toSide":"top","label":"mutation"},
		{"id":"47c2ee49db89c5b2","fromNode":"779541531315a4e0","fromSide":"bottom","toNode":"e465adfd84eb91df","toSide":"top","label":"query"},
		{"id":"b9a7285e99d49c67","fromNode":"70dd943b387cae1c","fromSide":"bottom","toNode":"9901bf717e450475","toSide":"top"},
		{"id":"80c76d81a15b5f00","fromNode":"e465adfd84eb91df","fromSide":"bottom","toNode":"4518556f6c35f343","toSide":"top"},
		{"id":"9982b67e8f91b7f7","fromNode":"779541531315a4e0","fromSide":"bottom","toNode":"de807bc2dd4b3b23","toSide":"top","label":"include Authorization + auto redirect"},
		{"id":"a2548b590d7f58ea","fromNode":"0b999e76c55e3d57","fromSide":"right","toNode":"de807bc2dd4b3b23","toSide":"left","color":"1"},
		{"id":"7ef9d7c6df55ccd7","fromNode":"aa211c939b7c0c20","fromSide":"right","toNode":"de807bc2dd4b3b23","toSide":"left","color":"5"}
	]
}