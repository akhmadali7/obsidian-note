{
	"nodes":[
		{"id":"65411924f6c83a84","type":"group","x":456,"y":-840,"width":2003,"height":2180,"color":"5","label":"Axios"},
		{"id":"cb9deb0e325751d9","type":"group","x":2880,"y":-920,"width":1438,"height":2605,"color":"1","label":"Token Management"},
		{"id":"640c46ffc5f970b5","type":"group","x":380,"y":1615,"width":2155,"height":1160,"color":"3","label":"React Query"},
		{"id":"cecd2e62f39c1b5b","type":"group","x":4480,"y":-105,"width":884,"height":1160,"color":"4","label":"Protected Route (using React Router DOM)"},
		{"id":"a9d7c82e98a35321","type":"group","x":686,"y":2920,"width":1543,"height":660,"label":"Components"},
		{"id":"132d663ac4b20ce3","type":"group","x":3678,"y":1055,"width":600,"height":560,"color":"6","label":"token source"},
		{"id":"7ff52b1afbd864b0","type":"text","text":"# Axios setup\n```js\n// src/services/config/axios-config.js\nimport axios from 'axios';  \nimport { alternativesEndpoints, authEndpoints, calculationEndpoints, criteriaEndpoints, parametersEndpoints, scoresEndpoints, weight_factorsEndpoints} from './endpoints-config.js';  \nimport {getToken, setAccessToken} from '../utils/token-state-utils.js';  \n  \nconst {renewAccessToken, ...} = authEndpoints  \nconst vikorAPIClient = axios.create({  \n    baseURL: import.meta.env.VITE_API_URL,  \n    timeout: 10000,  \n})\n```","x":476,"y":-578,"width":1963,"height":378},
		{"id":"65130f8bddaea6a3","type":"text","text":"- The Axios interceptor will automatically attach the correct token (`access`, `refresh`, or `verification`) to the request headers based on the endpoint configuration.\n- If the access token is expired, the interceptor will automatically attempt to refresh the token using the refresh token.\n- Separates the logic for refreshing the access token to make the code more modular and reusable.\n- TIPS: make interceptop separated from config file (make it less clustered)","x":476,"y":-800,"width":773,"height":200},
		{"id":"740c1a627b1f6030","type":"text","text":"#  Interceptor to attached any header type needed, as well as the token\n- check tokenType of all declared endpoints, if none then no need to attach authorization header\n- if it declared (access, verification, or refresh) then it will be used in interceptor\n- using the same Authorization header for all three (``Authorization``: Bearer ``access`` / ``verification``/ ``refresh``)\n\n```js\n//src/services/config/axios-interceptor-auto-attach-token-to-header.js  \nimport { getToken } from '../utils/token-state-utils.js';  // Import the token utility  \nimport {  \n    authEndpoints,  \n    alternativesEndpoints,  \n    criteriaEndpoints,  \n    parametersEndpoints,  \n    weight_factorsEndpoints,  \n    scoresEndpoints,  \n    calculationEndpoints  \n} from './endpoints-config.js';  // Import your endpoint configurations  \n  \n//? Helper function to get the token based on the endpoint and attach it to Authorization header  \nconst getTokenForEndpoint = (url) => {  \n    const allEndpoints = [  \n        ...Object.values(authEndpoints),  \n        ...Object.values(alternativesEndpoints),  \n        ...Object.values(criteriaEndpoints),  \n        ...Object.values(parametersEndpoints),  \n        ...Object.values(weight_factorsEndpoints),  \n        ...Object.values(scoresEndpoints),  \n        ...Object.values(calculationEndpoints)  \n    ];  \n  \n    // Loop through each endpoint object and match the url  \n    for (const { url: endpointUrl, tokenType } of allEndpoints) {  \n        // If the provided URL matches the endpoint URL  \n        if (url === endpointUrl) {  \n            if (tokenType !== 'none') {  \n                return getToken(tokenType); // Fetch token if it's not 'none'  \n            }  \n            return null; // No token needed  \n        }  \n    }  \n    // If no matching endpoint is found, return null  \n    return null;  \n};  \n  \n// Add an interceptor to handle adding the Authorization header if a token is found  \nconst axiosInterceptorAutoAttachTokenToHeader = (vikorAPIClient) => {  \n    vikorAPIClient.interceptors.request.use(  \n        async (config) => {  \n            const token = getTokenForEndpoint(config.url);  // Get token for the current endpoint  \n            if (token) {  \n                config.headers['Authorization'] = `Bearer ${token}`;  // Attach token to the Authorization header  \n            }  \n            return config;  \n        },  \n        (error) => Promise.reject(error)  // Reject if there's an error in the request  \n    );  \n};  \n  \nexport default axiosInterceptorAutoAttachTokenToHeader;\n```","x":476,"y":-160,"width":944,"height":1380},
		{"id":"03239d1e10d260b3","type":"text","text":"# Error Handling on 401 and auto renew access token\n- Automatically renew token when respond from server is 401 and refresh token is available in cookies\n- This is only executed when API calls happen, access token renewal by manual input (reload the page or a button that doesnt trigger any API calls)  is not this interceptor job\n```js\n//src/services/config/axios-interceptor-auto-renew-on-401.js  \nimport { setAccessToken } from '../utils/token-state-utils';  \nimport vikorAPIClient from './axios-config.js';  \nimport {authEndpoints} from './endpoints-config.js';  // Utility to save the new access token  \n  \nconst {renewAccessToken} = authEndpoints  \n  \nlet retryCount = 0;  // Track retry attempts for refreshing the token  \n  \n// Token refresh logic, returns a new access token  \nconst handleTokenRefresh = async () => {  \n    try {  \n        const response = await vikorAPIClient.post(  \n            renewAccessToken.url,  // Your token refresh endpoint  \n            {}, // No request body needed  \n            { withCredentials: true } // Ensure cookies are sent with the request  \n        );  \n  \n        const { new_access_token } = response.data.data;  \n        setAccessToken(new_access_token); // Save the new access token in storage  \n        console.log('Successfully renewed access token');  \n        return new_access_token;  \n    } catch (error) {  \n        console.error('Error refreshing access token:', error);  \n  \n        // If we've retried more than twice, redirect to log in  \n        if (retryCount >= 2) {  \n            console.error('Token renewal failed multiple times. Redirecting to login.');  \n            window.location.href = '/login';  // Redirect to login page  \n            return null;  \n        }  \n        retryCount += 1;  \n        return handleTokenRefresh(); // Retry token refresh  \n    }  \n};  \n  \n// Axios response interceptor setup  \nconst axiosInterceptorAutoRenewAccessOn401 = (vikorAPIClient) => {  \n    vikorAPIClient.interceptors.response.use(  \n        (response) => response, // Return successful response  \n        async (error) => {  \n            const originalRequest = error.config;  \n  \n            // If 401 Unauthorized and not already retried, attempt token refresh  \n            if (error.response?.status === 401 && !originalRequest._retry) {  \n                originalRequest._retry = true;  \n                const newAccessToken = await handleTokenRefresh();  \n                if (newAccessToken) {  \n                    originalRequest.headers['Authorization'] = `Bearer ${newAccessToken}`;  \n                    return vikorAPIClient(originalRequest); // Retry the original request  \n                }  \n            }  \n  \n            return Promise.reject(error); // Reject if the refresh fails  \n        }  \n    );  \n};  \n  \nexport default axiosInterceptorAutoRenewAccessOn401;\n\n```","x":1480,"y":-160,"width":959,"height":1460},
		{"id":"1de8d33802724917","type":"text","text":"# Define all endpoint in one single source of truth\n- **Defines endpoint paths**: It organizes your API endpoints in one central place.\n- **Token type**: Each endpoint specifies what kind of token it requires (`none`, `verification`, `access`, `refresh`), which is essential for controlling access.\n```js\n//src/services/config/endpoints-config.js\nexport const authEndpoints = {  \n    login: { url: '/auth/login', tokenType: 'none' },  \n    register: { url: '/auth/register', tokenType: 'none' },  \n    requestVerificationToken: { url: '/auth/request-verification-token', tokenType: 'none' },  \n    verifyAccount: { url: '/auth/verify-account', tokenType: 'verification' },  \n    forgotPassword: { url: '/auth/forgot-password', tokenType: 'verification' },  \n    resetPassword: { url: '/auth/reset-password', tokenType: 'verification' },  \n    deleteAccount: { url: '/auth/delete-account', tokenType: 'access' },  \n    renewAccessToken: { url: '/auth/renew-access-token', tokenType: 'refresh' },  \n}  \n  \nexport const alternativesEndpoints = {  \n    createNewALT: { url: '/alternatives', tokenType: 'access' },  \n    getAllALT: { url: '/alternatives', tokenType: 'access' },  \n    getOneALT: { url: '/alternatives/:id_alt', tokenType: 'access' },  \n    updateOneALT: { url: '/alternatives/:id_alt', tokenType: 'access' },  \n    toggleArchiveALT: { url: '/alternatives/:id_alt/archive', tokenType: 'access' },  \n    deleteOneALT: { url: '/alternatives/:id_alt', tokenType: 'access' },  \n    getStatsALT: { url: '/alternatives/stats', tokenType: 'access' },  \n}  \n  \nexport const criteriaEndpoints = {  \n    createNewCRT: { url: '/criteria', tokenType: 'access' },  \n    getAllCRT: { url: '/criteria', tokenType: 'access' },  \n    getOneCRT: { url: '/criteria/:id_crt', tokenType: 'access' },  \n    updateOneCRT: { url: '/criteria/:id_crt', tokenType: 'access' },  \n    toggleArchiveCRT: { url: '/criteria/:id_crt/archive', tokenType: 'access' },  \n    deleteOneCRT: { url: '/criteria/:id_crt', tokenType: 'access' },  \n    getStatsCRT: { url: '/criteria/stats', tokenType: 'access' },  \n}\n```","x":-720,"y":-102,"width":882,"height":900},
		{"id":"4180d7537768c3e6","type":"text","text":"# Resume\nthis note explain:\n- Define all needed endpoints in one place as single source of truth\n- define axios \n\t- setup (base_url, timeout)\n\t- interceptor to automatically attach token to Header, which token? defined by endpoints declaration\n\t- interceptor to automatically doing request on ","x":-691,"y":-870,"width":853,"height":481,"color":"6"},
		{"id":"fe0044dac9b56782","type":"text","text":"# Apply manual Renew Access Token on Reload (should work in any pages)","x":4540,"y":-586,"width":646,"height":351},
		{"id":"82694394777ebb31","type":"text","text":"# Manual Renew Access Token\n- **`refreshAccessToken`**: Handles refreshing the access token using the refresh token and stores the new tokens in storage.\n- **`handleTokenRefreshError`**: Clears stored tokens and redirects the user to the login page if the refresh fails (i.e., refresh token is invalid or expired).\n\n- If the refresh fails (e.g., refresh token is expired or invalid), the `authService` will handle it (log out the user and redirect to the login page).\n- This logic is centralized, so you don't need to manually check for token expiration in your components.\n-  The login, logout, and token refresh processes are managed centrally in the `authService`. \n- Your API calls will only be responsible for **requesting data** and **handling responses**, without worrying about session management.\n\n```js\n// src/services/utils/manual-renew-access-token-utils.js  \n  \n// Function to handle manual refreshing the access token using the refresh token  \nimport {clearTokens, getToken, setAccessToken} from './token-state-utils.js';  \nimport vikorAPIClient from '../config/axios-config.js';  \nimport {useNavigate} from 'react-router-dom';\n  \n// Function to handle the error if token refresh fails (logout)  \nexport const HandleTokenRefreshError = () => {  \n    clearTokens(); // Clear all tokens from localStorage  \n    alert('Your session has expired. Please log in again.'); // Notify user  \n    const navigate = useNavigate(); // Use `useNavigate` instead of `useHistory` in v6  \n    navigate('/login'); // Redirect to the login page  \n};\n\n```\n\n```js\n// Use this if you want to manually renew access token  \nexport const refreshAccessToken = async () => {  \n    const refreshToken = getToken('refresh');  \n    if (!refreshToken) {  \n        return Promise.reject('No refresh token available');  \n    }  \n  \n    try {  \n        const response = await vikorAPIClient.post('/auth/renew-access-token', { refreshToken });  \n        const { accessToken } = response.data;  \n  \n        // Store the new tokens  \n        setAccessToken(accessToken);  \n  \n        return accessToken;  \n    } catch (error) {  \n        console.error('Error refreshing access token', error);  \n        HandleTokenRefreshError(); // Handle error in refreshing token (e.g., expired refresh token)  \n        return Promise.reject(error);  \n    }  \n}; \n```\n\n``refreshAccessToken`` seems redundant since we already create interceptor to do, but this used when we want manually update the access token.","x":2900,"y":-900,"width":1319,"height":1200},
		{"id":"d112876cc0a5712a","type":"text","text":"# Token management utilty\n- access and verification will be store in global state or react query caching)\n-  refresh will be store in cookies\n  \n- **`getToken`**: Retrieves a token from `localStorage` (access, refresh, or verification).\n- **`setToken`**: Saves a token to `global state management (access, or verification)`.\n- **`clearTokens`**: Clears all authentication-related tokens from `global state management (zustand or else)`.\n- `refresh_token` is saved in httpOnly cookie, so basically the only setup we can do is wether to include refresh_token in a request or not.\n- \n```js\n// src/services/utils/token-state-utils.js\n\nimport { useToken } from '../../stores/useToken';  \n  \nexport const getToken = (type) => {  \n    const { accessToken, verificationToken } = useToken.getState();  \n  \n    switch (type) {  \n        case 'access':  \n            return accessToken;  \n        case 'verification':  \n            return verificationToken;  \n        default:  \n            return null;  \n    }  \n};  \n  \nexport const setAccessToken = (token) => {  \n    useToken.getState().setAccessToken(token);  \n};  \n  \n  \nexport const setVerificationToken = (token) => {  \n    useToken.getState().setVerificationToken(token);  \n};  \n  \nexport const clearTokens = () => {  \n    useToken.getState().clearTokens();  \n};\n\n```","x":2900,"y":505,"width":682,"height":1160},
		{"id":"5cdb59ba0bb58f14","type":"text","text":"Memory (State) / Cache:\n - Access token and verification token\n - Global State management","x":3698,"y":1085,"width":540,"height":170},
		{"id":"9aba57b92344336c","type":"text","text":"Cookies\n- Refresh token\n- can be replaces by assigning new data with same key\n- we decide wether include the cookies to request API or not:\n  ```js\n{withCredentials: true}","x":3698,"y":1275,"width":540,"height":300},
		{"id":"b97b2fc2f9734a74","type":"text","text":"# Use  Query or Mutation in Component \n- use form validation (`Yup, Zod`) and form state management (`formik`)\n- Define whether use the data from cache or directy on API call result\n- \n```js\n//src/pages/LoginPage.js\n\n//....\nconst {mutate, isPending, isError, error, data, isSuccess} = useLogin()\n//...\nconst handleFormOnSubmit = (values) => {  \n    console.log('Form submitted with values:', values);  \n    // TODO mutate POST /login  \n    mutate({  \n        email: realuser.email,  \n        password: realuser.password  \n    })  \n};\n```\n\n\n```js\nconst userData = queryClient.getQueryData(['user']);\nconst {data: userData} = useQueryUserProfile()\n```","x":706,"y":2940,"width":834,"height":620},
		{"id":"a50474c0ff57fdaa","type":"text","text":"","x":1720,"y":3132,"width":250,"height":118},
		{"id":"f52c258aef0e4511","type":"text","text":"- check if access token is exist","x":4500,"y":-65,"width":700,"height":180},
		{"id":"39826af8f68d94b2","type":"text","text":"```js\n// src/hooks/useAuth.js  \nimport { useEffect, useState } from 'react';  \nimport { getToken } from '../services/utils/token-state-utils.js';  \n  \nexport const useAuth = () => {  \n    const [loading, setLoading] = useState(true);  \n    const [isAuthenticated, setIsAuthenticated] = useState(false);  \n  \n    useEffect(() => {  \n        const token = getToken('access');  \n        setIsAuthenticated(!!token);  \n        setLoading(false);  \n    }, []);  \n  \n    return { isAuthenticated, loading };  \n};\n```","x":4500,"y":135,"width":844,"height":435},
		{"id":"091ed718c28b9096","type":"text","text":"```js\n// src/routes/PrivateRoute.js  \nimport { Navigate, Outlet } from 'react-router-dom';  \nimport {useAuth} from '../hooks/useAuth.js';  \n  \nconst PrivateRoute = () => {  \n    const { isAuthenticated, loading } = useAuth();  \n  \n    if (loading) {  \n        return <div>Loading...</div>;  \n    }  \n  \n    return isAuthenticated ? <Outlet /> : <Navigate to=\"/login\" replace />;  \n};  \n  \nexport default PrivateRoute;\n```","x":4500,"y":595,"width":844,"height":420},
		{"id":"4b771cc6a2da5582","type":"text","text":"```js\n```js\nexport const useRenewAccessToken = () => {  \n    const navigate = useNavigate();  \n    return useMutation({  \n        mutationFn: async () => {  \n            console.log(\"Attempting to renew access token...\");  \n            try {  \n                const renewResponse = await vikorAPIClient.post(renewAccessToken.url, null, {withCredentials: true});  \n                const {new_access_token} = renewResponse.data.data;  \n                return new_access_token;  \n            } catch (error) {  \n                console.log(\"Error renewing access token:\", error.response || error.message);  \n                clearTokens();  \n                navigate('/login'); // Uncomment if you want to redirect on error  \n                throw new Error('Failed to renew access token');  \n            }  \n        },  \n        onError: (error) => {  \n            console.log(\"Renew Access Token Error:\", error.response || error.message)  \n            clearTokens()  \n        },  \n        onSuccess: (new_access_token) => {  \n            setAccessToken(new_access_token)  \n            console.log('success renew access token')  \n        }  \n    })  \n}\n```","x":1455,"y":1635,"width":1052,"height":660},
		{"id":"3d0cb521335f60ba","type":"text","text":"# React Query nor Mutation \n\n```js\n///src/services/API/useAuthAPI.js\nimport {useMutation, useQueryClient} from '@tanstack/react-query';  \nimport vikorAPIClient from '../config/axios-config.js';  \nimport {authEndpoints} from '../config/endpoints-config.js';  \nimport {clearTokens, setAccessToken} from '../utils/token-state-utils.js';  \nimport {Navigate, useNavigate} from 'react-router-dom';  \n  \nconst {  \n    login,  \n    register,  \n    requestVerificationToken,  \n    verifyAccount,  \n    forgotPassword,  \n    resetPassword,  \n    deleteAccount,  \n    renewAccessToken,  \n    logout  \n} = authEndpoints  \n  \n```\n\n```js\nexport const useLogin = () => {  \n    const navigate = useNavigate();  \n    const queryClient = useQueryClient();  \n    return useMutation({  \n        mutationFn: async ({email, password}) => {  \n            console.log(\"Sending data to API:\", {email, password}); // Debugging: Log the data being sent to the backend  \n            const loginResponse = await vikorAPIClient.post(login.url, {email, password});  \n            return loginResponse.data; // Returning the data (not the full response)  \n        },  \n        onError: (error) => {  \n            console.error(\"Login error:\", error.response || error.message);  \n        },        onSuccess: (data) => {  \n            const {data: {access_token, user_data}} = data;  \n            setAccessToken(access_token)  \n            queryClient.setQueryData(['user'], user_data);  \n            console.log('Login Succeed')  \n            console.log('Store access token succeed')  \n            console.log('Data user cached successfully')  \n            navigate('/test')  \n            console.log('succeed auto redirect to /test')  \n        }  \n    });  \n};\n```","x":400,"y":1635,"width":1038,"height":1100}
	],
	"edges":[
		{"id":"03d650358c96fdda","fromNode":"1de8d33802724917","fromSide":"right","toNode":"740c1a627b1f6030","toSide":"left"},
		{"id":"37ae996aa93eded4","fromNode":"d112876cc0a5712a","fromSide":"left","toNode":"65411924f6c83a84","toSide":"right","fromEnd":"arrow"},
		{"id":"11208c4d9484567a","fromNode":"82694394777ebb31","fromSide":"bottom","toNode":"d112876cc0a5712a","toSide":"top"},
		{"id":"c7980170deb4cf86","fromNode":"82694394777ebb31","fromSide":"left","toNode":"65411924f6c83a84","toSide":"right"},
		{"id":"10718a988e68a353","fromNode":"132d663ac4b20ce3","fromSide":"left","toNode":"d112876cc0a5712a","toSide":"right","fromEnd":"arrow"},
		{"id":"971951ea10fe9f61","fromNode":"82694394777ebb31","fromSide":"right","toNode":"fe0044dac9b56782","toSide":"left"},
		{"id":"957a0a62989fa639","fromNode":"65411924f6c83a84","fromSide":"bottom","toNode":"640c46ffc5f970b5","toSide":"top"},
		{"id":"778a639c07f07dc6","fromNode":"640c46ffc5f970b5","fromSide":"right","toNode":"d112876cc0a5712a","toSide":"left"},
		{"id":"f2678c95ea0c39aa","fromNode":"39826af8f68d94b2","fromSide":"bottom","toNode":"091ed718c28b9096","toSide":"top"},
		{"id":"c994e785d933e5e4","fromNode":"39826af8f68d94b2","fromSide":"left","toNode":"d112876cc0a5712a","toSide":"right"},
		{"id":"bd797f4f3e28a31b","fromNode":"1de8d33802724917","fromSide":"bottom","toNode":"3d0cb521335f60ba","toSide":"left"},
		{"id":"47e28bba2ce624f3","fromNode":"640c46ffc5f970b5","fromSide":"bottom","toNode":"a9d7c82e98a35321","toSide":"top"}
	]
}