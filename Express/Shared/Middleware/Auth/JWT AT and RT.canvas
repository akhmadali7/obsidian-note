{
  "edges": [
    {
      "fromNode": "16bf126d95dc8479",
      "fromSide": "right",
      "id": "d25730b71de6ca96",
      "styleAttributes": {
        "pathfindingMethod": null
      },
      "toNode": "a73f78a08bc082a4",
      "toSide": "left"
    },
    {
      "fromNode": "4c351f67188a2fb8",
      "fromSide": "right",
      "id": "61834983d89df664",
      "styleAttributes": {
        "pathfindingMethod": null
      },
      "toNode": "16ba368ca5a4f603",
      "toSide": "left"
    },
    {
      "fromNode": "21da57552a423f53",
      "fromSide": "left",
      "id": "4202f7e171ca08c8",
      "toNode": "17f7e33629d402af",
      "toSide": "right"
    },
    {
      "fromNode": "4c351f67188a2fb8",
      "fromSide": "right",
      "id": "a314f0d7acdf10a0",
      "styleAttributes": {
        "pathfindingMethod": null
      },
      "toNode": "a73f78a08bc082a4",
      "toSide": "left"
    },
    {
      "fromNode": "4c351f67188a2fb8",
      "fromSide": "right",
      "id": "789fc0360b32751a",
      "styleAttributes": {
        "pathfindingMethod": null
      },
      "toNode": "41d3c5cf0ca02859",
      "toSide": "left"
    },
    {
      "fromNode": "21da57552a423f53",
      "fromSide": "left",
      "id": "14946dba9a588a9e",
      "toNode": "41d3c5cf0ca02859",
      "toSide": "right"
    },
    {
      "fromNode": "ab803581a3c67c72",
      "fromSide": "left",
      "id": "ccc07d4258fdec72",
      "toNode": "17f7e33629d402af",
      "toSide": "right"
    },
    {
      "color": "5",
      "fromNode": "9ec31bbdbfa53062",
      "fromSide": "left",
      "id": "a2cca3b5d0b9faa8",
      "label": "more preferred",
      "toNode": "ab803581a3c67c72",
      "toSide": "right"
    },
    {
      "fromNode": "c9d28b6446232a6e",
      "fromSide": "left",
      "id": "e54220bbc0dd4f4a",
      "toNode": "ab803581a3c67c72",
      "toSide": "right"
    }
  ],
  "nodes": [
    {
      "color": "2",
      "height": 640,
      "id": "4c351f67188a2fb8",
      "styleAttributes": {
      },
      "text": "```js\nimport jwt from 'jsonwebtoken';\n\nexport const accessTokenVerification = (req, res, next) => {\n    const { authorization } = req.headers;\n    if (!authorization) {\n        return res.status(401).json({\n            status: \"error\",\n            code: \"TOKEN_NEEDED\",\n            message: \"token needed\"\n        });\n    }\n\n    try {\n        const token = authorization.split(' ')[1];\n        const JWT_SECRET_AT = process.env.JWT_SECRET_ACCESS_TOKEN;\n        const decodedToken = jwt.verify(token, JWT_SECRET_AT);\n        req.userData = decodedToken; // Attach user data to the request object\n        next(); // Continue to the next middleware/route\n    } catch (err) {\n        return res.status(401).json({\n            code: \"UNAUTHORIZED\",\n            status: \"error\",\n            serverMessage: \"Internal Server Error\"\n        });\n    }\n}\n```",
      "type": "text",
      "width": 740,
      "x": -1100,
      "y": -680
    },
    {
      "height": 340,
      "id": "16bf126d95dc8479",
      "styleAttributes": {
      },
      "text": "```js\nconst adminVerification = (req, res, next) => {\n    // Ensure the user has admin privileges\n    if (req.userData && req.userData.role === 'admin') {\n        return next();\n    }\n\n    return res.status(403).json({\n        status: \"error\",\n        code: \"FORBIDDEN\",\n        message: \"Admin access required\"\n    });\n}\n```",
      "type": "text",
      "width": 660,
      "x": -1020,
      "y": 4
    },
    {
      "height": 283,
      "id": "41d3c5cf0ca02859",
      "styleAttributes": {
      },
      "text": "```js\nrouter.post(\"/logout\",accessTokenVerification, refreshTokenVerification, controller.logout);\n```\n\n- in order to securely use your **logout endpoint**, you need the **access token** to verify the user’s identity (which the `accessTokenVerification` middleware does)\n- Even though you’re revoking the **refresh token** in the **logout** process, the **access token** is still required to confirm that the user is authorized to log out.\n\n- dont forget to send expire refresh token cookie",
      "type": "text",
      "width": 882,
      "x": -172,
      "y": -643
    },
    {
      "color": "3",
      "height": 520,
      "id": "21da57552a423f53",
      "styleAttributes": {
      },
      "text": "```js\nconst refreshTokenVerification = (req, res, next) => {\n    const clientRefreshToken = req.cookies.refreshToken; // Extract the refresh token\n    if (!clientRefreshToken) {\n        return res.status(401).json({\n            status: \"error\",\n            code: \"REFRESH_TOKEN_NEEDED\"\n        })}\n    try {\n        const JWT_SECRET_RT = process.env.JWT_SECRET_REFRESH_TOKEN;\n        const decodedToken = jwt.verify(clientRefreshToken, JWT_SECRET_RT);\n        req.userData = decodedToken;\n        next()\n    } catch (err) {\n        return res.status(401).json({\n            code: \"UNAUTHORIZED\",\n            status: \"error\",\n            serverMessage: \"Internal Server Error\"\n        });\n    }\n}\n```",
      "type": "text",
      "width": 840,
      "x": 860,
      "y": -663
    },
    {
      "height": 60,
      "id": "ab803581a3c67c72",
      "styleAttributes": {
      },
      "text": "pick one",
      "type": "text",
      "width": 250,
      "x": 800,
      "y": -26
    },
    {
      "height": 87,
      "id": "17f7e33629d402af",
      "styleAttributes": {
      },
      "text": "```js\nrouter.post(\"/renew-access-token\", refreshTokenVerification, controller.renewAccessToken);\n```",
      "type": "text",
      "width": 832,
      "x": -147,
      "y": -40
    },
    {
      "height": 900,
      "id": "c9d28b6446232a6e",
      "styleAttributes": {
      },
      "text": "```js\nimport jwt from 'jsonwebtoken';\n\nexport const reNewAccessToken = (req, res) => {\n    const clientRefreshToken = req.cookies.refreshToken; // Extract the refresh token from cookies\n    if (!clientRefreshToken) {\n        return res.status(401).json({\n            status: \"error\",\n            code: \"REFRESH_TOKEN_NEEDED\",\n            message: \"Refresh token is required\"\n        });\n    }\n\n    try {\n        const JWT_SECRET_RT = process.env.JWT_SECRET_REFRESH_TOKEN;\n        const decodedToken = jwt.verify(clientRefreshToken, JWT_SECRET_RT);\n        \n        // Now you can generate a new access token\n        const JWT_SECRET_AT = process.env.JWT_SECRET_ACCESS_TOKEN;\n        const newAccessToken = jwt.sign(\n            { userId: decodedToken.userId }, // You can include more information here\n            JWT_SECRET_AT, \n            { expiresIn: '1h' } // Set an appropriate expiration time\n        );\n\n        // Send the new access token to the client\n        return res.status(200).json({\n            status: \"success\",\n            newAccessToken\n        });\n\n    } catch (err) {\n        return res.status(401).json({\n            code: \"UNAUTHORIZED\",\n            status: \"error\",\n            message: \"Invalid refresh token\"\n        });\n    }\n};\n```",
      "type": "text",
      "width": 920,
      "x": 1880,
      "y": 440
    },
    {
      "height": 869,
      "id": "9ec31bbdbfa53062",
      "styleAttributes": {
      },
      "text": "```js\nexport const renewAccessToken = asyncHandler(async (req, res) => {  \n    //get the refresh token from client (+decoded token)  \n    const {decodedToken: user, clientRefreshToken: client_refresh_token} = req.userData  \n  \n    //Create payload to used in JWT token  \n    const payload = {  \n        uuid: user.uuid,  \n        username: user.username,  \n        role: user.role,  \n    }  \n  \n    //Generate AT & RT  \n    const access_token = await generateAccessToken(payload)  \n  \n    //? using rotation flow refresh token (new refresh token created while creatting new access token)  \n    const refresh_token = await generateRefreshToken(payload)  \n  \n    // Send the new refresh token in the cookie to FE  \n    res.cookie('refresh_token', refresh_token, {  \n        httpOnly: true, // Make it accessible only by the server  \n        secure: process.env.NODE_ENV === 'production', // Set to true in production  \n        maxAge: parseInt(process.env.JWT_REFRESH_TOKEN_EXPIRES_IN) * 24 * 60 * 60 * 1000 // Set expiration based on your config  \n    });  \n  \n    //insert / update refresh token in database  \n    const {email} = await services.findUserByUUID(user.uuid)  \n    const saveRefreshToken = await services.createRefreshToken(email, refresh_token)  \n  \n    res.status(200).json({  \n        message: `succeed renewed access token for user with uuid: ${user.uuid}`,  \n        data: {  \n            new_access_token: access_token,  \n            new_refresh_token: '<check-cookies>'  \n        }  \n    });  \n})\n```",
      "type": "text",
      "width": 993,
      "x": 1880,
      "y": -460
    },
    {
      "height": 78,
      "id": "16ba368ca5a4f603",
      "styleAttributes": {
      },
      "text": "```js\napp.use('/alternatives', accessTokenVerification, alternativesRoutes)\n```",
      "type": "text",
      "width": 703,
      "x": -172,
      "y": -300
    },
    {
      "height": 78,
      "id": "a73f78a08bc082a4",
      "styleAttributes": {
      },
      "text": "```js\napp.use('/admin', accessTokenVerification, adminVerification, adminRoutes)\n```",
      "type": "text",
      "width": 702,
      "x": -171,
      "y": -182
    }
  ]
}